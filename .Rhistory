#데이터에 bar chart를 그려봅시다
plt + geom_bar(stat="identity",fill=rainbow(nrow(seoul.merged))) +
ggtitle("서울 자치구별 인구") + xlab("자치구") + ylab("인구수") +
theme(axis.text.x = element_text(angle = 90))
#데이터에 bar chart를 그려봅시다
plt + geom_bar(stat="identity",fill=rainbow(nrow(seoul.merged))) +
ggtitle("서울 자치구별 인구") + xlab("자치구") + ylab("인구수") +
theme(axis.text.x = element_text(angle = 90), axis.title.x = element_text(size = 14))
#데이터에 bar chart를 그려봅시다
plt + geom_bar(stat="identity",fill=rainbow(nrow(seoul.merged))) +
ggtitle("서울 자치구별 인구") + xlab("자치구") + ylab("인구수") +
theme(axis.text.x = element_text(angle = 90), axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 9))
plt <-
plt + geom_bar(stat="identity",fill=rainbow(nrow(seoul.merged))) +
ggtitle("서울 자치구별 인구") + xlab("자치구") + ylab("인구수") +
theme(axis.text.x = element_text(angle = 90), axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 9))
#인터랙티브 그래프로 만들기 plotly패키지 이용
plt
install.packages("plotly")
library(plotly)
ggplotly(plt)
#oracle 데이터베이스 연결
#JDBC연결 위한 패키지들
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
#라이브러리 로드
library(rJava)
library(DBI)
library(RJDBC)
#ojdbc 드라이버 경로
driver.path <-
"C:/oraclexe/app/oracle/product/11.2.0/server/jdbc/lib/ojdbc6.jar"
driver <- JDBC(driverClass = "oracle.jdbc.driver.OracleDriver",
classPath = driver.path)
#connection얻기
conn <- dbConnect(driver, "jdbc:oracle:thin:@localhost:1521/xe", "hr", "hr")
?dbConnect
conn
#테이블 목록 확인
dbListTables(conn)
#employees table읽기
employees <- dbReadTable(conn, "employees")
#employees table읽기
#오라클과 호환이 잘 안됨: employees <- dbReadTable(conn, "employees")
#query만들기
query <- "SELECT * FROM employees"
rs <- dbGetQuery(conn, query)
rs <- dbGetQuery(conn, query)#쿼리 실행
rs
str(rs)
#데이터베이스 접속 해제
dbDisconnect(conn)
#각 구간별 데이터 밀도의 합은 1
sum(stat$density * 5)
#frequency = false로 주면 밀도그래프로 변경가능
stat <- hist(wstudents$height, freq = FALSE, main = "Height of wstudents(Density)", xlab = "Height",
col = "orange", border = "black")
#각 구간별 데이터의 밀도
stat$density
library(RJDBC)
y<-2
x <- 1
load("D:/bitr/rstudy/01-r-language-syntax.R")
x <- 1
y <- 2
y <- -2
x * y
demo persp()
demo (persp)
x
x <- c(1,2,3)
x
y
x <- c(1,2,3)
x
y -> c(2,3,4)
y
x <- c(1,2,3)
x
y -> c(2,3,4)
y
x <- c(1,2,3)
x
y -> c(2,3,4)
y
x <- c(1,2,3)
x
y <- c(2,3,4)
y
x * y
z <- 9
x * z
x * z
x * z
a <- c(1,2)
x * z
a <- c(1,2)
x * a
x * z
a <- c(1,2)
x * a
length(x)
x * z
a <- c(1,2)
x * a
length(x)
length(y)
x * z
a <- c(1,2)
x * a
length(x)
length(y)
length(z)
x <- c(1,2,3,4,6)
x <- c(1,2,3,4,6)
x <- c(1,2,3,4,6)
y <- c('1','2','3','4','5')
z <- c('how','are','you','?')
x <- c(1,2,3,4,6)
y <- c('1','2','3','4','5')
z <- c('how','are','you','?')
length(x)
x <- c(1,2,3,4,6)
y <- c('1','2','3','4','5')
z <- c('how','are','you','?')
length(x)
length(y)
x <- c(1,2,3,4,6)
y <- c('1','2','3','4','5')
z <- c('how','are','you','?')
length(x)
length(y)
x * y
x <- c(1,2,3,4,6)
y <- c('1','2','3','4','5')
z <- c('how','are','you','?')
length(x)
length(y)
x * y
z
x <- c(1,2,3,4,6)
y <- c('1','2','3','4','5')
z <- c('how','are','you','?')
length(x)
length(y)
x * y
z
y
x <- c(1,2,3,4,6)
y <- c('1','2','3','4','5')
z <- c('how','are','you','?')
length(x)
length(y)
x * y
z
y
x
x <- c(1,2,3,4,6)
y <- c('1','2','3','4','5')
z <- c('how','are','you','?')
length(x)
length(y)
x * y
z
y
x
str(x)
str(x)
str(y)
str(z)
1+2=3
1+2==3
1 + 5 == 7
x
y
x == y
x <- c(1,22,3,5,4,565,-7,868,-9,979,-97,342)
sum(x)
mean(x)
sum(x) / length(x)
max(x)
min(x)
y <- c(1:100)
y
x
x[1]
z <- c(3:15)
x[5]
x[5:10]
x > 5
x > 5
x > 5
x <- c(1,22,3,5,4,565,-7,868,-9,979,-97,342,23,1,1,35,46,6,7,8,2,4,75,12,54,-6,7,23,123,53,12,3,4,5446,22)
x > 5
sum(x > 100)
x > 100
sum(x[x > 100])
x[x > 100]
which(x > 100)
name <- c('john', 'jaehee', 'juliet', 'james')
sex <- c('f', 'f', 'f', 'm')
occup <- c('althele', 'doctor', 'ceo', 'analyst')
age <- c(40, 35, 43, 29)
data.frame(name, age, sex, occup)
member <- data.frame(name, age, sex, occup)
member
age[1]
name[3]
member[1]
member[1,]
member[,1]
member$name
member$sex
member[2,4]
member
member[1,3]
member[1,3] <- 'm'
member
read.table(file.choose())
read.table(file.choose())
fontdata <- read.table(file.choose(), header = True)
fontdata <- read.table(file.choose(), header = True)
fontdata <- read.table(file.choose(), header = True)
fontdata <- read.table(file.choose(), header = True)
fontdata <- read.table(file.choose(), header = True)
fontdata <- read.table(file.choose(), header = True)
fontdata <- read.table(file.choose(), header = True)
fontdata <- read.table(file.choose(), header = TRUE)
fontdata <- read.table(file.choose(), header = TRUE)
fontdata <- read.table(file.choose(), header = TRUE)
fontdata <- read.table(file.choose(), header = TRUE)
fontdata <- read.table(file.choose(), header = TRUE)
fontdata <- read.table(file.choose(), header = TRUE)
classdata <- read.table(file.choose(), header = TRUE)
classdata
head(classdata)
tail(classdata)
classdata2 <- read.csv(file.choose(), header = T)
classdata2
head(classdata2)
str(classdata2)
max(classdata2)
max(classdata2$Math)
min(classdata2$English)
runif(100)
runif(10000)
runif(10000) * 6
ceiling(runif(10000) * 6)
die <- ceiling(runif(10000) * 6)
table(die)
die <- ceiling(runif(100) * 6)
table(die)
roll <- 10
die <- ceiling(runif(roll) * 6)
table(die)
roll <- 10
n <- 6
die <- ceiling(runif(roll) * n)
table(die)
roll <- 100
n <- 6
die <- ceiling(runif(roll) * n)
table(die)
barplot(b)
roll <- 100
n <- 6
die <- ceiling(runif(roll) * n)
b <- table(die)
barplot(b)
roll <- 10
n <- 6
die <- ceiling(runif(roll) * n)
b <- table(die)
barplot(b)
roll <- 100
n <- 6
die <- ceiling(runif(roll) * n)
b <- table(die)
barplot(b)
roll <- 1000
n <- 6
die <- ceiling(runif(roll) * n)
b <- table(die)
barplot(b)
roll <- 10000
n <- 6
die <- ceiling(runif(roll) * n)
b <- table(die)
barplot(b)
roll <- 1000000
n <- 6
die <- ceiling(runif(roll) * n)
b <- table(die)
barplot(b)
b
roll <- 1000000
n <- 6
die <- ceiling(runif(roll) * n)
b <- table(die)
barplot(b)
b
# sum of two dice
roll <- 100
dice <- ceiling(runif(roll) * 6) + ceiling(runif(roll) * 6)
table(dice)
a <- table(dice)
barplot(a)
# sum of two dice
roll <- 1000
dice <- ceiling(runif(roll) * 6) + ceiling(runif(roll) * 6)
a <- table(dice)
barplot(a)
# sum of two dice
roll <- 10000
dice <- ceiling(runif(roll) * 6) + ceiling(runif(roll) * 6)
a <- table(dice)
barplot(a)
a
a[1]
#Graph함수들
#산점도 차트: 두 변수간의 관계를 파악하기 위한 그래프
?mtcars
str(mtcars)
#중량(wt)과 연비(mpg)를 scater plot으로 그려보기
plot(mtcars$wt, mtcars$mpg)
#두 변수 사이의 경향성을 확인
#역상관관계
cor(mtcars$wt, mtcars$mpg)
plot(x = mtcars$wt, y = mtcars$mpg, xlab = "차량중량", ylab = "연비", main = "중량vs연비", col = "red")
#산점도 매트릭스
#지정한 변수간 상관관계를 한 눈에 보여주는 그래프
?pairs
pairs(data = mtcars, ~wt + mpg + hp + cyl, main = "Scatterplot Matrix")
#파이 차트
#전체 중에 해당 데이터가 차지하는 비율을 표시
scores <- data.frame(grade = c("A","B","C","D"), cnt = c(3, 12, 11, 2))
scores
str(scores)
pie(scores$cnt, labels = scores$grade, radius = 1, #col = c("red","blue","yellow","green")
col = rainbow(4), main = "2019년 성적")
#Legend(범례)
#Label 대신 퍼센트 정보를 출력
scores$percent <- round(scores$cnt/sum(scores$cnt)*100, 1)
scores$percent
sum(scores$percent)
pie(scores$cnt, labels = scores$percent, col = rainbow(length(scores$cnt)), main = "2019년 성적")
legend("topright", legend = scores$grade, fill = rainbow(length(scores$cnt)))
#Bar Chart
#항목간의 값을 비교
#데이터 생성
rev <- sample(1:20, 6, rep = T)
rev
barplot(rev)
names <- c("MAR","APR","MAY","JUN","JUL","AUG")
barplot(rev, names.arg = names, xlab = "MONTH", ylab = "Revenue", main = "Revenue Chart", col = "blue", border = "red")
#Stacked Bar Chart
rev2 <- sample(1:20, 18, rep = T)
#3행 6열의 MATRIX
rev2 <- matrix(rev2, nrow = 3)
rev2
barplot(rev2, names.arg = names, xlab = "MONTH", ylab = "Revenue", main = "Revenue Chart",
col = c("green","orange","red"), border = "red")
#범례 표시
legend("topright", c("A","B","C"), fill = c("green","orange","red"))
#BoxPlot
#데이터의 전체적 분포를 확인
#mtcars mpg, cyl 데이터의 분포
bt.input <- mtcars[, c("mpg", "cyl")]
bt.input
boxplot(mpg~cyl, data = bt.input, xlab = "Cylinder", ylab = "MPG", col = c("green", "yellow", "orange"),
names = c("LOW","MEDIUM","HIGH"))
#히스토그램
#특정구간별 관측횟수(비율)을 그래프로 확인할 수 있음
wstudents
wstudents$height
#히스토그램
hist(wstudents$height, main = "Height of wstudents", xlab = "Height", col = "red", border = "blue")
#frequency = false로 주면 밀도그래프로 변경가능
stat <- hist(wstudents$height, freq = FALSE, main = "Height of wstudents(Density)", xlab = "Height",
col = "orange", border = "black")
#R의 그래프 함수들은 단순히 그리기만 하는 것이 아니라 해당 그래프를 만들 때
#필요했던 통계치들도 함께 데이터로 담고 있다
stat
is(stat)
#히스토그램의 구간 경계값
stat$breaks
#각 구간별 데이터의 개수(빈도)
stat$counts
#각 구간별 데이터의 밀도
stat$density
#각 구간별 데이터 밀도의 합은 1
sum(stat$density * 5)
#Line 그래프
#주로 시간의 흐름에 따라 추세 혹은 트렌드변화를 표시해주는 그래프
v <- sample(10:20, 5, rep = F)
v
plot(v, type = "p") #점 그래프
plot(v, type = "l") #선 그래프
plot(v, type = "o") #점,선이 함께
plot(v, type = "o", main="Line Graph", xlab = "HORZ", ylab = "VERT", col = "red")
#legend, lines, points등의 함수는 그래프를 덧그릴 수 있다
v2 <- sample(10:20, 5, rep=T)
v2
lines(v2, type = "o", col="blue")
##ggplot2
#시각화를 위한 그래픽 라이브러리
#mpg 데이터 셋으로 그래프를 만드는 연습
library(ggplot2)
?mpg
#displ(배기량), hwy(고속도로 연비)
#그래프
plt <- ggplot(data = mpg)
plt
#레이어를 얹을때는 + 로 연결
plt + geom_point(aes(x=displ,y=hwy)) +
xlab("배기량") + ylab("고속도로 연비")
seoul.merged
#자치구별 인구수 데이터로 시각화 연습
plt <- ggplot(seoul.merged, aes(x=자치구,y=계/1000))
plt
#데이터에 bar chart를 그려봅시다
plt <-
plt + geom_bar(stat="identity",fill=rainbow(nrow(seoul.merged))) +
ggtitle("서울 자치구별 인구") + xlab("자치구") + ylab("인구수") +
theme(axis.text.x = element_text(angle = 90), axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 9))
#인터랙티브 그래프로 만들기 plotly패키지 이용
plt
install.packages("plotly")
library(plotly)
ggplotly(plt)
ggplotly(plt)
#산술연산: +-*/
#제곱:^,**
7^5
# 두개의 ㅇ상의 명령을 한꺼번에 샐행할경우만 ;필요
7^5;7**5
#나눗셈의 몫과 나머지
#몫: %/% ,나머지 %%
7%/%5 #몫
7%%5 #나머지
#비교연산: <, <=, >, >=, ==, !=
#논리값: true or false -> T OR F 줄여쓸 수 있다
7==5 # equal
7!=5 #not equal
#논리 연산: |, (OR), &(AND), !(NOT)
#OR연산->둘 중에 하나면 참이면 참
7>5 | 8<7
7>5 & 8<7 #AND연선->둘 다 참이어야 참참
(7>5 | 8<7) == TRUE
(7>5 | 8<7) == T #줄여쓸 수 있다
#객체
#객체 생성: 할당 방향에 따라서 <-, >-사용 가능
#명명 규칙: 문자,숫자, _, . 을 조합하여 사용
#           대소문자구분, 숫자로 시작할 수 없다
eng <- 90
80 -> math
#일반 프로그래밍 언어와 같이 = 할당 연산자도 사용할 수 있다
total = eng + math
#객체의 목록 보기: ls()
ls()
#객체의 삭제: rm()
rm(total)
ls()
#total이라는 객체가 우리 메모리 상에 있는가
"total" %in% ls()
#vector
# :동일 타입의 데이터를 묶은 1차원 데이터
v1 <- c(2,4,6,8,10) #기본적인 벡터 생성법
v1
v2 <- 1:10 #시작값:끝값값
v2
v3 <- seq(1,10) #seq함수수
v3
v4 <- seq(1,10,by=2) #1부터 10까지 2간격으로 생성성
v4
v5 <- seq(from=2, to=10, by=2) #파라미터를 이용해서 각 속성을 지정할 수 있다
v5
v6 <- seq(1,100, length.out = 12) #균등분할할
v6
#객체(벡터의 길이를 구하려면 length함수
length(v6)
#벡터는 단일 자료형을 다룬다
#여러 형태가 섞여 있ㄹ 경우 한가지 형태로 변환
v7 <- c(1,2,"3",4,5) #문자열이 섞여 있을 경우 문자열로 변환
v7
c(1,2, TRUE, FALSE, 5)
#기본 자료형
#float(numeric)
n <- 3.14159
n
#integer:뒤에 L을 부여
i = 314L
i
#complex:복소수 : 실수부+허수부
cpx = 2+3i
cpx
#문자형: ""
s <- "r programming"
s
#Date 날짜형: 문자형처럼 취급죄지만 Date형으로 변환 될 수 있다
d <- "2019-11-11"
d
v <- c(1,2,3,4,5)
#객체 확인 is()함수로 확인
is(v)
is(i) #값이 1개여도 r은 벡터로 처리한다
#객체 확인 is()함수로 확인
is(v)
